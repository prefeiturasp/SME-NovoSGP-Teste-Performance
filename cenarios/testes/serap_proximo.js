import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend, Rate, Counter } from 'k6/metrics';
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";
import { SharedArray } from 'k6/data';

export let GetCustomerDuration = new Trend('get_customer_duration');
export let GetCustomerFailRate = new Rate('get_customer_fail_rate');
export let GetCustomerSuccessRate = new Rate('get_customer_success_rate');
export let GetCustomerReqs = new Counter('get_customer_reqs');
export let GetCustomerErrors = new Counter('get_customer_errors');

const PROVA_ID = __ENV.PROVA_ID;
//const PROVA_ID = '599'; // ID fixo para teste

// Teste que não passa pela aplicação em dot.net, apenas chama a API diretamente

export function handleSummary(data) {
    return { "report/teste_carga_proxima_sem_passar_aplicacao_test.html": htmlReport(data) };
}
 
export const options = {
  stages: [
    { duration: '1s', target: 1 },   // subida inicial (aquecimento)
    { duration: '1s', target: 1 },  // aumento gradual
    { duration: '1s', target: 1 },  // carga pesada
    { duration: '1s', target: 1 },  // estresse máximo
    { duration: '1s', target: 1 },  // desaceleração
  ],

  thresholds: {
    http_req_failed: ['rate<0.01'],         // menos de 1% de erros
    http_req_duration: ['p(95)<1000'],      // 95% das respostas devem ser < 1000ms
  },
};
 
const url = 'https://hom-serap-estudante.sme.prefeitura.sp.gov.br/proximo';
 
const payload = JSON.stringify({
  ESTUDANTE: "36301",
  AnoEscolarEstudante: "9",
  proficiencia: "188.268123174059",
  "profic.inic": "188.268123174059",
  idItem:
    "24028844,24028853,24028854,24028856,24028857,24028858,24028859,24028860,24028861,24028862,24028863,24028864,24028865,24028866,24028867,24028868,24028869,24028870,24028871,24028872,24028873,24028874,24028875,24028876,24028877,24028878,24028879,24028880,24028881,24028882,24028883,24028884,24028885,24028886,24028887,24028888,24028889,24028890,24028891,24028892,24028893,24028894,24028895,24028896,24028897,24028898,24028899,24028900,24028901,24028902,24028903,24028904,24028905,24028906,24028907,24028908,24028909,24028910,24028911,24028912,24028913,24028914,24028915,24028916,24028917,24028918,24028919,24028920,24028921,24028922,24028923,24028924,24028925,24028926,24028927,24028928,24028929,24028930,24028931,24028932,24028933,24028934,24028935,24028936,24028937,24028938,24028939,24028940,24028941,24028942,24028943,24028944,24028945",
  parA: "0.018,0.014,0.023,0.020,0.014,0.019,0.020,0.023,0.012,0.014,0.028,0.006,0.009,0.017,0.039,0.012,0.017,0.015,0.027,0.022,0.035,0.020,0.007,0.019,0.035,0.009,0.011,0.020,0.022,0.019,0.032,0.012,0.028,0.006,0.005,0.015,0.017,0.034,0.021,0.036,0.021,0.014,0.012,0.010,0.027,0.028,0.013,0.026,0.025,0.039,0.020,0.013,0.013,0.026,0.018,0.018,0.019,0.006,0.018,0.020,0.031,0.013,0.014,0.016,0.012,0.009,0.009,0.028,0.010,0.010,0.000,0.012,0.019,0.022,0.011,0.011,0.027,0.029,0.013,0.013,0.045,0.042,0.007,0.013,0.018,0.018,0.019,0.023,0.010,0.024,0.016,0.025,0.019",
  parB: "325.156,433.800,325.489,266.297,374.096,289.348,307.259,368.335,361.641,325.264,313.768,319.238,376.337,325.680,340.625,347.912,370.439,373.646,285.626,299.337,314.681,347.428,242.358,272.084,298.813,213.934,255.692,192.961,274.470,285.073,290.021,162.850,252.195,237.639,193.993,236.206,250.365,285.713,305.847,180.396,200.847,187.643,113.261,176.455,274.444,317.333,199.744,261.527,174.845,218.182,155.109,252.795,298.039,262.032,181.300,251.628,110.536,244.060,218.556,285.140,218.234,163.627,233.919,303.169,247.837,146.801,265.472,300.550,160.869,204.875,1984.589,292.607,130.690,191.944,199.474,369.721,256.335,237.363,307.247,319.086,259.065,261.455,228.238,190.105,147.764,172.775,212.197,209.956,275.457,228.382,276.510,316.443,254.436",
  parC: "0.199,0.319,0.244,0.131,0.180,0.191,0.191,0.308,0.260,0.202,0.082,0.146,0.233,0.377,0.123,0.285,0.248,0.238,0.158,0.219,0.093,0.119,0.058,0.306,0.291,0.122,0.169,0.136,0.133,0.176,0.220,0.165,0.152,0.095,0.152,0.195,0.169,0.148,0.344,0.170,0.038,0.209,0.006,0.091,0.121,0.159,0.196,0.131,0.160,0.168,0.148,0.277,0.120,0.265,0.127,0.210,0.083,0.137,0.189,0.148,0.205,0.105,0.195,0.295,0.148,0.028,0.094,0.299,0.103,0.036,0.250,0.069,0.010,0.178,0.296,0.242,0.172,0.132,0.231,0.121,0.258,0.301,0.082,0.152,0.159,0.125,0.151,0.131,0.217,0.218,0.145,0.184,0.288",
  administrado: "24028892,24028902",
  respostas: "96007951,96007992",
  gabarito: "96007953,96007994",
  erropadrao: "0.35",
  "n.Ij": 93,
  componente: "Matem\u00E1tica",
  idEixo:
    "5479,5993,5997,5994,5995,5994,5995,5996,5995,5994,5996,5993,5994,5993,5997,5993,5997,5995,5997,5997,5997,5997,5474,5990,5992,5990,5992,5992,5991,5990,5992,5989,5988,5989,5990,5991,5988,5992,5474,4439,4442,4439,4443,4441,4442,4439,4439,4440,4440,4440,4440,4440,4440,4440,4439,4441,4441,4441,4443,4440,4443,4441,4440,4439,4442,4443,4443,4440,4441,4441,4439,4441,4440,4439,4439,4443,4439,4439,4439,4441,4441,4441,4441,4441,4442,4442,4442,4442,4441,4443,4440,4439,4439",
  idHabilidade:
    "5683,6191,6215,6200,6205,6198,6202,6207,6203,6198,6208,6194,6197,6194,6216,6195,6212,6206,6213,6214,6216,6211,5689,6182,6272,6187,6270,6269,6190,6186,6272,6177,6176,6179,6184,6188,6173,6273,5695,4449,4464,4448,4467,4458,4464,4445,4444,4452,4452,4452,4452,4452,4452,4452,4444,4459,4457,4458,4465,4453,4469,4459,4453,4444,4462,4469,4469,4453,4459,4459,4445,4460,4455,4450,4448,4468,4449,4449,4451,4458,4457,4457,4457,4457,4462,4462,4462,4463,4458,4469,4453,4446,4449",
});
 
const params = {
  headers: {
    'Content-Type': 'application/json',
  },
};
 
export default function () {
  const res = http.post(url, payload, params);
 
  check(res, {
    'status 200': (r) => r.status === 200,
    'resposta não vazia': (r) => r.body && r.body.length > 0,
  });
  console.log(res.json());
}